

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "App.config"
//     Connection String Name: "TachographContext"
//     Connection String:      "DataSource=C:\Source\MergeDatabases\App_Data\btac.sdf;Max Database Size=4091"
// ------------------------------------------------------------------------------------------------
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MergeDatabases
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<CustomDayOfWeek> CustomDayOfWeeks { get; set; } // CustomDayOfWeeks
        System.Data.Entity.DbSet<CustomerContact> CustomerContacts { get; set; } // CustomerContacts
        System.Data.Entity.DbSet<DetailedException> DetailedExceptions { get; set; } // DetailedExceptions
        System.Data.Entity.DbSet<DriverCardFile> DriverCardFiles { get; set; } // DriverCardFiles
        System.Data.Entity.DbSet<Gv212Report> Gv212Report { get; set; } // GV212Report
        System.Data.Entity.DbSet<InspectionEquipment> InspectionEquipments { get; set; } // InspectionEquipments
        System.Data.Entity.DbSet<InspectionMethod> InspectionMethods { get; set; } // InspectionMethods
        System.Data.Entity.DbSet<LetterForDecommissioningDocument> LetterForDecommissioningDocuments { get; set; } // LetterForDecommissioningDocuments
        System.Data.Entity.DbSet<LinkedVehicle> LinkedVehicles { get; set; } // LinkedVehicles
        System.Data.Entity.DbSet<MailSetting> MailSettings { get; set; } // MailSettings
        System.Data.Entity.DbSet<MigrationHistory> MigrationHistories { get; set; } // __MigrationHistory
        System.Data.Entity.DbSet<MiscellaneousSetting> MiscellaneousSettings { get; set; } // MiscellaneousSettings
        System.Data.Entity.DbSet<MobileApplicationUser> MobileApplicationUsers { get; set; } // MobileApplicationUsers
        System.Data.Entity.DbSet<PrinterSetting> PrinterSettings { get; set; } // PrinterSettings
        System.Data.Entity.DbSet<QcReport> QcReports { get; set; } // QCReports
        System.Data.Entity.DbSet<QcReport6Month> QcReport6Month { get; set; } // QCReport6Month
        System.Data.Entity.DbSet<RegistrationData> RegistrationDatas { get; set; } // RegistrationData
        System.Data.Entity.DbSet<TachographDocument> TachographDocuments { get; set; } // TachographDocuments
        System.Data.Entity.DbSet<TachographFile> TachographFiles { get; set; } // TachographFiles
        System.Data.Entity.DbSet<TachographMake> TachographMakes { get; set; } // TachographMakes
        System.Data.Entity.DbSet<TachographModel> TachographModels { get; set; } // TachographModels
        System.Data.Entity.DbSet<Technician> Technicians { get; set; } // Technicians
        System.Data.Entity.DbSet<ThemeSetting> ThemeSettings { get; set; } // ThemeSettings
        System.Data.Entity.DbSet<TyreSize> TyreSizes { get; set; } // TyreSizes
        System.Data.Entity.DbSet<UndownloadabilityDocument> UndownloadabilityDocuments { get; set; } // UndownloadabilityDocuments
        System.Data.Entity.DbSet<User> Users { get; set; } // Users
        System.Data.Entity.DbSet<VehicleMake> VehicleMakes { get; set; } // VehicleMakes
        System.Data.Entity.DbSet<VehicleModel> VehicleModels { get; set; } // VehicleModels
        System.Data.Entity.DbSet<WorkerTask> WorkerTasks { get; set; } // WorkerTasks
        System.Data.Entity.DbSet<WorkshopCardFile> WorkshopCardFiles { get; set; } // WorkshopCardFiles
        System.Data.Entity.DbSet<WorkshopSetting> WorkshopSettings { get; set; } // WorkshopSettings

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<CustomDayOfWeek> CustomDayOfWeeks { get; set; } // CustomDayOfWeeks
        public System.Data.Entity.DbSet<CustomerContact> CustomerContacts { get; set; } // CustomerContacts
        public System.Data.Entity.DbSet<DetailedException> DetailedExceptions { get; set; } // DetailedExceptions
        public System.Data.Entity.DbSet<DriverCardFile> DriverCardFiles { get; set; } // DriverCardFiles
        public System.Data.Entity.DbSet<Gv212Report> Gv212Report { get; set; } // GV212Report
        public System.Data.Entity.DbSet<InspectionEquipment> InspectionEquipments { get; set; } // InspectionEquipments
        public System.Data.Entity.DbSet<InspectionMethod> InspectionMethods { get; set; } // InspectionMethods
        public System.Data.Entity.DbSet<LetterForDecommissioningDocument> LetterForDecommissioningDocuments { get; set; } // LetterForDecommissioningDocuments
        public System.Data.Entity.DbSet<LinkedVehicle> LinkedVehicles { get; set; } // LinkedVehicles
        public System.Data.Entity.DbSet<MailSetting> MailSettings { get; set; } // MailSettings
        public System.Data.Entity.DbSet<MigrationHistory> MigrationHistories { get; set; } // __MigrationHistory
        public System.Data.Entity.DbSet<MiscellaneousSetting> MiscellaneousSettings { get; set; } // MiscellaneousSettings
        public System.Data.Entity.DbSet<MobileApplicationUser> MobileApplicationUsers { get; set; } // MobileApplicationUsers
        public System.Data.Entity.DbSet<PrinterSetting> PrinterSettings { get; set; } // PrinterSettings
        public System.Data.Entity.DbSet<QcReport> QcReports { get; set; } // QCReports
        public System.Data.Entity.DbSet<QcReport6Month> QcReport6Month { get; set; } // QCReport6Month
        public System.Data.Entity.DbSet<RegistrationData> RegistrationDatas { get; set; } // RegistrationData
        public System.Data.Entity.DbSet<TachographDocument> TachographDocuments { get; set; } // TachographDocuments
        public System.Data.Entity.DbSet<TachographFile> TachographFiles { get; set; } // TachographFiles
        public System.Data.Entity.DbSet<TachographMake> TachographMakes { get; set; } // TachographMakes
        public System.Data.Entity.DbSet<TachographModel> TachographModels { get; set; } // TachographModels
        public System.Data.Entity.DbSet<Technician> Technicians { get; set; } // Technicians
        public System.Data.Entity.DbSet<ThemeSetting> ThemeSettings { get; set; } // ThemeSettings
        public System.Data.Entity.DbSet<TyreSize> TyreSizes { get; set; } // TyreSizes
        public System.Data.Entity.DbSet<UndownloadabilityDocument> UndownloadabilityDocuments { get; set; } // UndownloadabilityDocuments
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users
        public System.Data.Entity.DbSet<VehicleMake> VehicleMakes { get; set; } // VehicleMakes
        public System.Data.Entity.DbSet<VehicleModel> VehicleModels { get; set; } // VehicleModels
        public System.Data.Entity.DbSet<WorkerTask> WorkerTasks { get; set; } // WorkerTasks
        public System.Data.Entity.DbSet<WorkshopCardFile> WorkshopCardFiles { get; set; } // WorkshopCardFiles
        public System.Data.Entity.DbSet<WorkshopSetting> WorkshopSettings { get; set; } // WorkshopSettings

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=TachographContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CustomDayOfWeekConfiguration());
            modelBuilder.Configurations.Add(new CustomerContactConfiguration());
            modelBuilder.Configurations.Add(new DetailedExceptionConfiguration());
            modelBuilder.Configurations.Add(new DriverCardFileConfiguration());
            modelBuilder.Configurations.Add(new Gv212ReportConfiguration());
            modelBuilder.Configurations.Add(new InspectionEquipmentConfiguration());
            modelBuilder.Configurations.Add(new InspectionMethodConfiguration());
            modelBuilder.Configurations.Add(new LetterForDecommissioningDocumentConfiguration());
            modelBuilder.Configurations.Add(new LinkedVehicleConfiguration());
            modelBuilder.Configurations.Add(new MailSettingConfiguration());
            modelBuilder.Configurations.Add(new MigrationHistoryConfiguration());
            modelBuilder.Configurations.Add(new MiscellaneousSettingConfiguration());
            modelBuilder.Configurations.Add(new MobileApplicationUserConfiguration());
            modelBuilder.Configurations.Add(new PrinterSettingConfiguration());
            modelBuilder.Configurations.Add(new QcReportConfiguration());
            modelBuilder.Configurations.Add(new QcReport6MonthConfiguration());
            modelBuilder.Configurations.Add(new RegistrationDataConfiguration());
            modelBuilder.Configurations.Add(new TachographDocumentConfiguration());
            modelBuilder.Configurations.Add(new TachographFileConfiguration());
            modelBuilder.Configurations.Add(new TachographMakeConfiguration());
            modelBuilder.Configurations.Add(new TachographModelConfiguration());
            modelBuilder.Configurations.Add(new TechnicianConfiguration());
            modelBuilder.Configurations.Add(new ThemeSettingConfiguration());
            modelBuilder.Configurations.Add(new TyreSizeConfiguration());
            modelBuilder.Configurations.Add(new UndownloadabilityDocumentConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new VehicleMakeConfiguration());
            modelBuilder.Configurations.Add(new VehicleModelConfiguration());
            modelBuilder.Configurations.Add(new WorkerTaskConfiguration());
            modelBuilder.Configurations.Add(new WorkshopCardFileConfiguration());
            modelBuilder.Configurations.Add(new WorkshopSettingConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CustomDayOfWeekConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerContactConfiguration(schema));
            modelBuilder.Configurations.Add(new DetailedExceptionConfiguration(schema));
            modelBuilder.Configurations.Add(new DriverCardFileConfiguration(schema));
            modelBuilder.Configurations.Add(new Gv212ReportConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionEquipmentConfiguration(schema));
            modelBuilder.Configurations.Add(new InspectionMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new LetterForDecommissioningDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new LinkedVehicleConfiguration(schema));
            modelBuilder.Configurations.Add(new MailSettingConfiguration(schema));
            modelBuilder.Configurations.Add(new MigrationHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new MiscellaneousSettingConfiguration(schema));
            modelBuilder.Configurations.Add(new MobileApplicationUserConfiguration(schema));
            modelBuilder.Configurations.Add(new PrinterSettingConfiguration(schema));
            modelBuilder.Configurations.Add(new QcReportConfiguration(schema));
            modelBuilder.Configurations.Add(new QcReport6MonthConfiguration(schema));
            modelBuilder.Configurations.Add(new RegistrationDataConfiguration(schema));
            modelBuilder.Configurations.Add(new TachographDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new TachographFileConfiguration(schema));
            modelBuilder.Configurations.Add(new TachographMakeConfiguration(schema));
            modelBuilder.Configurations.Add(new TachographModelConfiguration(schema));
            modelBuilder.Configurations.Add(new TechnicianConfiguration(schema));
            modelBuilder.Configurations.Add(new ThemeSettingConfiguration(schema));
            modelBuilder.Configurations.Add(new TyreSizeConfiguration(schema));
            modelBuilder.Configurations.Add(new UndownloadabilityDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new VehicleMakeConfiguration(schema));
            modelBuilder.Configurations.Add(new VehicleModelConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkerTaskConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkshopCardFileConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkshopSettingConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<CustomDayOfWeek> CustomDayOfWeeks { get; set; }
        public System.Data.Entity.DbSet<CustomerContact> CustomerContacts { get; set; }
        public System.Data.Entity.DbSet<DetailedException> DetailedExceptions { get; set; }
        public System.Data.Entity.DbSet<DriverCardFile> DriverCardFiles { get; set; }
        public System.Data.Entity.DbSet<Gv212Report> Gv212Report { get; set; }
        public System.Data.Entity.DbSet<InspectionEquipment> InspectionEquipments { get; set; }
        public System.Data.Entity.DbSet<InspectionMethod> InspectionMethods { get; set; }
        public System.Data.Entity.DbSet<LetterForDecommissioningDocument> LetterForDecommissioningDocuments { get; set; }
        public System.Data.Entity.DbSet<LinkedVehicle> LinkedVehicles { get; set; }
        public System.Data.Entity.DbSet<MailSetting> MailSettings { get; set; }
        public System.Data.Entity.DbSet<MigrationHistory> MigrationHistories { get; set; }
        public System.Data.Entity.DbSet<MiscellaneousSetting> MiscellaneousSettings { get; set; }
        public System.Data.Entity.DbSet<MobileApplicationUser> MobileApplicationUsers { get; set; }
        public System.Data.Entity.DbSet<PrinterSetting> PrinterSettings { get; set; }
        public System.Data.Entity.DbSet<QcReport> QcReports { get; set; }
        public System.Data.Entity.DbSet<QcReport6Month> QcReport6Month { get; set; }
        public System.Data.Entity.DbSet<RegistrationData> RegistrationDatas { get; set; }
        public System.Data.Entity.DbSet<TachographDocument> TachographDocuments { get; set; }
        public System.Data.Entity.DbSet<TachographFile> TachographFiles { get; set; }
        public System.Data.Entity.DbSet<TachographMake> TachographMakes { get; set; }
        public System.Data.Entity.DbSet<TachographModel> TachographModels { get; set; }
        public System.Data.Entity.DbSet<Technician> Technicians { get; set; }
        public System.Data.Entity.DbSet<ThemeSetting> ThemeSettings { get; set; }
        public System.Data.Entity.DbSet<TyreSize> TyreSizes { get; set; }
        public System.Data.Entity.DbSet<UndownloadabilityDocument> UndownloadabilityDocuments { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<VehicleMake> VehicleMakes { get; set; }
        public System.Data.Entity.DbSet<VehicleModel> VehicleModels { get; set; }
        public System.Data.Entity.DbSet<WorkerTask> WorkerTasks { get; set; }
        public System.Data.Entity.DbSet<WorkshopCardFile> WorkshopCardFiles { get; set; }
        public System.Data.Entity.DbSet<WorkshopSetting> WorkshopSettings { get; set; }

        public FakeMyDbContext()
        {
            CustomDayOfWeeks = new FakeDbSet<CustomDayOfWeek>("Id");
            CustomerContacts = new FakeDbSet<CustomerContact>("Id");
            DetailedExceptions = new FakeDbSet<DetailedException>("Id");
            DriverCardFiles = new FakeDbSet<DriverCardFile>("Id");
            Gv212Report = new FakeDbSet<Gv212Report>("Id");
            InspectionEquipments = new FakeDbSet<InspectionEquipment>("Id");
            InspectionMethods = new FakeDbSet<InspectionMethod>("Id");
            LetterForDecommissioningDocuments = new FakeDbSet<LetterForDecommissioningDocument>("Id");
            LinkedVehicles = new FakeDbSet<LinkedVehicle>("Id");
            MailSettings = new FakeDbSet<MailSetting>("Id");
            MigrationHistories = new FakeDbSet<MigrationHistory>("MigrationId", "ContextKey");
            MiscellaneousSettings = new FakeDbSet<MiscellaneousSetting>("Id");
            MobileApplicationUsers = new FakeDbSet<MobileApplicationUser>("Id");
            PrinterSettings = new FakeDbSet<PrinterSetting>("Id");
            QcReports = new FakeDbSet<QcReport>("Id");
            QcReport6Month = new FakeDbSet<QcReport6Month>("Id");
            RegistrationDatas = new FakeDbSet<RegistrationData>("Id");
            TachographDocuments = new FakeDbSet<TachographDocument>("Id");
            TachographFiles = new FakeDbSet<TachographFile>("Id");
            TachographMakes = new FakeDbSet<TachographMake>("Id");
            TachographModels = new FakeDbSet<TachographModel>("Id");
            Technicians = new FakeDbSet<Technician>("Id");
            ThemeSettings = new FakeDbSet<ThemeSetting>("Id");
            TyreSizes = new FakeDbSet<TyreSize>("Id");
            UndownloadabilityDocuments = new FakeDbSet<UndownloadabilityDocument>("Id");
            Users = new FakeDbSet<User>("Id");
            VehicleMakes = new FakeDbSet<VehicleMake>("Id");
            VehicleModels = new FakeDbSet<VehicleModel>("Id");
            WorkerTasks = new FakeDbSet<WorkerTask>("Id");
            WorkshopCardFiles = new FakeDbSet<WorkshopCardFile>("Id");
            WorkshopSettings = new FakeDbSet<WorkshopSetting>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        public System.Data.Entity.Database Database { get; }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // CustomDayOfWeeks
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class CustomDayOfWeek
    {
        public int Id { get; set; } // Id (Primary key)
        public string DayOfWeek { get; set; } // DayOfWeek (length: 4000)
        public int? WorkshopSettingsId { get; set; } // WorkshopSettings_Id
        public System.DateTime? Deleted { get; set; } // Deleted

        // Foreign keys
        public virtual WorkshopSetting WorkshopSetting { get; set; } // FK_dbo.CustomDayOfWeeks_dbo.WorkshopSettings_WorkshopSettings_Id
    }

    // CustomerContacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class CustomerContact
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 4000)
        public string Email { get; set; } // Email (length: 4000)
        public string Address { get; set; } // Address (length: 4000)
        public string PostCode { get; set; } // PostCode (length: 4000)
        public string Town { get; set; } // Town (length: 4000)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 4000)
        public string SecondaryEmail { get; set; } // SecondaryEmail (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted
        public int UserId { get; set; } // UserId
        public System.DateTime? Uploaded { get; set; } // Uploaded

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DriverCardFile> DriverCardFiles { get; set; } // DriverCardFiles.FK_dbo.DriverCardFiles_dbo.CustomerContacts_Customer_Id
        public virtual System.Collections.Generic.ICollection<LinkedVehicle> LinkedVehicles { get; set; } // LinkedVehicles.FK_dbo.LinkedVehicles_dbo.CustomerContacts_CustomerContact_Id

        public CustomerContact()
        {
            UserId = 0;
            DriverCardFiles = new System.Collections.Generic.List<DriverCardFile>();
            LinkedVehicles = new System.Collections.Generic.List<LinkedVehicle>();
        }
    }

    // DetailedExceptions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class DetailedException
    {
        public int Id { get; set; } // Id (Primary key)
        public string ExceptionDetails { get; set; } // ExceptionDetails (length: 536870911)
        public string ApplicationName { get; set; } // ApplicationName (length: 4000)
        public byte[] RawImage { get; set; } // RawImage (length: 1073741823)
        public System.DateTime Occurred { get; set; } // Occurred
        public System.DateTime? Deleted { get; set; } // Deleted
        public int UserId { get; set; } // UserId
        public System.DateTime? Uploaded { get; set; } // Uploaded

        public DetailedException()
        {
            UserId = 0;
        }
    }

    // DriverCardFiles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class DriverCardFile
    {
        public int Id { get; set; } // Id (Primary key)
        public string Driver { get; set; } // Driver (length: 4000)
        public string FileName { get; set; } // FileName (length: 4000)
        public byte[] SerializedFile { get; set; } // SerializedFile (length: 1073741823)
        public System.DateTime Date { get; set; } // Date
        public int? CustomerId { get; set; } // Customer_Id
        public System.DateTime? Deleted { get; set; } // Deleted

        // Foreign keys
        public virtual CustomerContact CustomerContact { get; set; } // FK_dbo.DriverCardFiles_dbo.CustomerContacts_Customer_Id
    }

    // GV212Report
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class Gv212Report
    {
        public int Id { get; set; } // Id (Primary key)
        public System.DateTime Created { get; set; } // Created
        public byte[] SerializedData { get; set; } // SerializedData (length: 1073741823)
        public System.DateTime? Deleted { get; set; } // Deleted
    }

    // InspectionEquipments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class InspectionEquipment
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted
    }

    // InspectionMethods
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class InspectionMethod
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted
    }

    // LetterForDecommissioningDocuments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class LetterForDecommissioningDocument
    {
        public int Id { get; set; } // Id (Primary key)
        public System.DateTime Created { get; set; } // Created
        public string DocumentType { get; set; } // DocumentType (length: 4000)
        public string Office { get; set; } // Office (length: 4000)
        public string RegistrationNumber { get; set; } // RegistrationNumber (length: 4000)
        public string TachographMake { get; set; } // TachographMake (length: 4000)
        public string TachographModel { get; set; } // TachographModel (length: 4000)
        public string SerialNumber { get; set; } // SerialNumber (length: 4000)
        public System.DateTime? InspectionDate { get; set; } // InspectionDate
        public string Technician { get; set; } // Technician (length: 4000)
        public string CustomerContact { get; set; } // CustomerContact (length: 4000)
        public string DepotName { get; set; } // DepotName (length: 4000)
        public string CompanyName { get; set; } // CompanyName (length: 4000)
        public byte[] SerializedData { get; set; } // SerializedData (length: 1073741823)
        public int UserId { get; set; } // UserId
        public System.DateTime? Deleted { get; set; } // Deleted
        public System.DateTime? Uploaded { get; set; } // Uploaded

        public LetterForDecommissioningDocument()
        {
            UserId = 0;
        }
    }

    // LinkedVehicles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class LinkedVehicle
    {
        public int Id { get; set; } // Id (Primary key)
        public string VehicleRegistrationNumber { get; set; } // VehicleRegistrationNumber (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted
        public int? CustomerContactId { get; set; } // CustomerContact_Id

        // Foreign keys
        public virtual CustomerContact CustomerContact { get; set; } // FK_dbo.LinkedVehicles_dbo.CustomerContacts_CustomerContact_Id
    }

    // MailSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class MailSetting
    {
        public int Id { get; set; } // Id (Primary key)
        public bool AutoEmailCertificates { get; set; } // AutoEmailCertificates
        public string Subject { get; set; } // Subject (length: 536870911)
        public string Body { get; set; } // Body (length: 536870911)
        public string Content { get; set; } // Content (length: 536870911)
        public bool PersonaliseMyEmails { get; set; } // PersonaliseMyEmails
        public System.DateTime? Deleted { get; set; } // Deleted

        public MailSetting()
        {
            PersonaliseMyEmails = false;
        }
    }

    // __MigrationHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class MigrationHistory
    {
        public string MigrationId { get; set; } // MigrationId (Primary key) (length: 150)
        public string ContextKey { get; set; } // ContextKey (Primary key) (length: 300)
        public byte[] Model { get; set; } // Model (length: 1073741823)
        public string ProductVersion { get; set; } // ProductVersion (length: 32)
    }

    // MiscellaneousSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class MiscellaneousSetting
    {
        public int Id { get; set; } // Id (Primary key)
        public string DefaultDigitalDocumentType { get; set; } // DefaultDigitalDocumentType (length: 4000)
        public string DefaultAnalogueDocumentType { get; set; } // DefaultAnalogueDocumentType (length: 4000)
        public bool ExcludeLogosWhenPrinting { get; set; } // ExcludeLogosWhenPrinting
        public int LastMigrationHackId { get; set; } // LastMigrationHackId
        public System.DateTime? Deleted { get; set; } // Deleted

        public MiscellaneousSetting()
        {
            ExcludeLogosWhenPrinting = false;
            LastMigrationHackId = 0;
        }
    }

    // MobileApplicationUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class MobileApplicationUser
    {
        public int Id { get; set; } // Id (Primary key)
        public string Username { get; set; } // Username (length: 4000)
        public string Thumbprint { get; set; } // Thumbprint (length: 4000)
        public bool IsAuthorized { get; set; } // IsAuthorized

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<QcReport> QcReports { get; set; } // QCReports.FK_dbo.QCReports_dbo.MobileApplicationUsers_User_Id
        public virtual System.Collections.Generic.ICollection<QcReport6Month> QcReport6Month { get; set; } // QCReport6Month.FK_dbo.QCReport6Month_dbo.MobileApplicationUsers_User_Id

        public MobileApplicationUser()
        {
            QcReport6Month = new System.Collections.Generic.List<QcReport6Month>();
            QcReports = new System.Collections.Generic.List<QcReport>();
        }
    }

    // PrinterSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class PrinterSetting
    {
        public int Id { get; set; } // Id (Primary key)
        public bool AlwaysAskForPrinter { get; set; } // AlwaysAskForPrinter
        public bool UseDefaultPrinter { get; set; } // UseDefaultPrinter
        public string DefaultPrinterName { get; set; } // DefaultPrinterName (length: 4000)
        public string DefaultLabelPrinter { get; set; } // DefaultLabelPrinter (length: 4000)
        public bool IsPortrait { get; set; } // IsPortrait
        public bool IsLandscape { get; set; } // IsLandscape
        public int DefaultNumberOfCopies { get; set; } // DefaultNumberOfCopies
        public int LabelNumberOfCopies { get; set; } // LabelNumberOfCopies
        public bool AutoPrintLabels { get; set; } // AutoPrintLabels
        public string DefaultFont { get; set; } // DefaultFont (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted
        public bool AutoClosePdfProgram { get; set; } // AutoClosePDFProgram
        public int Timeout { get; set; } // Timeout
        public bool ShowCompanyNameOnLabels { get; set; } // ShowCompanyNameOnLabels

        public PrinterSetting()
        {
            DefaultNumberOfCopies = 0;
            LabelNumberOfCopies = 0;
            AutoPrintLabels = false;
            AutoClosePdfProgram = false;
            Timeout = 0;
            ShowCompanyNameOnLabels = false;
        }
    }

    // QCReports
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class QcReport
    {
        public int Id { get; set; } // Id (Primary key)
        public string TachoCentreName { get; set; } // TachoCentreName (length: 4000)
        public string TachoCentreLine1 { get; set; } // TachoCentreLine1 (length: 4000)
        public string TachoCentreLine2 { get; set; } // TachoCentreLine2 (length: 4000)
        public string TachoCentreLine3 { get; set; } // TachoCentreLine3 (length: 4000)
        public string TachoCentreCity { get; set; } // TachoCentreCity (length: 4000)
        public string TachoCentrePostCode { get; set; } // TachoCentrePostCode (length: 4000)
        public string TachoManagerName { get; set; } // TachoManagerName (length: 4000)
        public string QcManagerName { get; set; } // QCManagerName (length: 4000)
        public string TechnicianName { get; set; } // TechnicianName (length: 4000)
        public System.DateTime DateOfAudit { get; set; } // DateOfAudit
        public string TypeOfTachographCheck { get; set; } // TypeOfTachographCheck (length: 4000)
        public string TachographMake { get; set; } // TachographMake (length: 4000)
        public string TachographModel { get; set; } // TachographModel (length: 4000)
        public string TachographSerialNumber { get; set; } // TachographSerialNumber (length: 4000)
        public string VehicleMake { get; set; } // VehicleMake (length: 4000)
        public string VehicleType { get; set; } // VehicleType (length: 4000)
        public string VehicleRegistrationNumber { get; set; } // VehicleRegistrationNumber (length: 4000)
        public string VehicleIdentificationNumber { get; set; } // VehicleIdentificationNumber (length: 4000)
        public bool ThreeBasicChecksCompleted { get; set; } // ThreeBasicChecksCompleted
        public int? WFactor { get; set; } // WFactor
        public int? LFactor { get; set; } // LFactor
        public int? KFactor { get; set; } // KFactor
        public string FortyKmTest { get; set; } // FortyKmTest (length: 4000)
        public string SixtyKmTest { get; set; } // SixtyKmTest (length: 4000)
        public bool? ClockTestCompleted { get; set; } // ClockTestCompleted
        public bool? BenchTestCarriedOutAnalogue { get; set; } // BenchTestCarriedOutAnalogue
        public bool? FunctionalBenchTestDigital { get; set; } // FunctionalBenchTestDigital
        public bool? DistanceCheckCarriedOut { get; set; } // DistanceCheckCarriedOut
        public bool? TestChartsCompleted { get; set; } // TestChartsCompleted
        public bool? SpeedForSpeedCheckCompleted { get; set; } // SpeedForSpeedCheckCompleted
        public bool SystemSealedInAccordance { get; set; } // SystemSealedInAccordance
        public bool CalibrationCertificateCompleted { get; set; } // CalibrationCertificateCompleted
        public bool? ReferenceCableCheckCompleted { get; set; } // ReferenceCableCheckCompleted
        public bool? TechnicalDataPrintoutsCreated { get; set; } // TechnicalDataPrintoutsCreated
        public bool? EventsFaultsReadCleared { get; set; } // EventsFaultsReadCleared
        public string Comments { get; set; } // Comments (length: 4000)
        public bool Passed { get; set; } // Passed
        public string CentreName { get; set; } // CentreName (length: 4000)
        public System.DateTime Created { get; set; } // Created
        public System.DateTime? Uploaded { get; set; } // Uploaded
        public int MobileDocumentType { get; set; } // MobileDocumentType
        public int? ConnectUserId { get; set; } // ConnectUserId
        public byte[] SerializedData { get; set; } // SerializedData (length: 1073741823)
        public System.DateTime? Deleted { get; set; } // Deleted
        public int? UserId { get; set; } // User_Id

        // Foreign keys
        public virtual MobileApplicationUser MobileApplicationUser { get; set; } // FK_dbo.QCReports_dbo.MobileApplicationUsers_User_Id
    }

    // QCReport6Month
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class QcReport6Month
    {
        public int Id { get; set; } // Id (Primary key)
        public string CentreSealNumber { get; set; } // CentreSealNumber (length: 4000)
        public bool Section3Question1 { get; set; } // Section3Question1
        public bool Section3Question2 { get; set; } // Section3Question2
        public bool Section4Question1 { get; set; } // Section4Question1
        public bool Section4Question2 { get; set; } // Section4Question2
        public bool Section4Question3 { get; set; } // Section4Question3
        public bool Section5Question1 { get; set; } // Section5Question1
        public bool Section5Question2 { get; set; } // Section5Question2
        public bool Section7Question1 { get; set; } // Section7Question1
        public bool Section7Question2 { get; set; } // Section7Question2
        public bool CalibrationSection9And10Question1 { get; set; } // CalibrationSection9And10Question1
        public bool CalibrationSection9And10Question2 { get; set; } // CalibrationSection9And10Question2
        public bool CalibrationSection9And10Question3 { get; set; } // CalibrationSection9And10Question3
        public bool DataManagementSection10Question1 { get; set; } // DataManagementSection10Question1
        public bool DataManagementSection10Question2 { get; set; } // DataManagementSection10Question2
        public bool DataManagementSection10Question3 { get; set; } // DataManagementSection10Question3
        public string FurtherDetails { get; set; } // FurtherDetails (length: 4000)
        public string Name { get; set; } // Name (length: 4000)
        public System.DateTime Date { get; set; } // Date
        public string CentreName { get; set; } // CentreName (length: 4000)
        public System.DateTime Created { get; set; } // Created
        public System.DateTime? Uploaded { get; set; } // Uploaded
        public int MobileDocumentType { get; set; } // MobileDocumentType
        public int? ConnectUserId { get; set; } // ConnectUserId
        public byte[] SerializedData { get; set; } // SerializedData (length: 1073741823)
        public System.DateTime? Deleted { get; set; } // Deleted
        public int? UserId { get; set; } // User_Id

        // Foreign keys
        public virtual MobileApplicationUser MobileApplicationUser { get; set; } // FK_dbo.QCReport6Month_dbo.MobileApplicationUsers_User_Id
    }

    // RegistrationData
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class RegistrationData
    {
        public int Id { get; set; } // Id (Primary key)
        public string LicenseKey { get; set; } // LicenseKey (length: 4000)
        public string CompanyName { get; set; } // CompanyName (length: 4000)
        public string SealNumber { get; set; } // SealNumber (length: 4000)
        public string DepotName { get; set; } // DepotName (length: 4000)
        public bool IsConnectEnabled { get; set; } // IsConnectEnabled
        public System.DateTime? Deleted { get; set; } // Deleted

        public RegistrationData()
        {
            IsConnectEnabled = false;
        }
    }

    // TachographDocuments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TachographDocument
    {
        public int Id { get; set; } // Id (Primary key)
        public string Vin { get; set; } // VIN (length: 4000)
        public string VehicleMake { get; set; } // VehicleMake (length: 4000)
        public string VehicleModel { get; set; } // VehicleModel (length: 4000)
        public string TyreSize { get; set; } // TyreSize (length: 4000)
        public string VehicleType { get; set; } // VehicleType (length: 4000)
        public string WFactor { get; set; } // WFactor (length: 4000)
        public string KFactor { get; set; } // KFactor (length: 4000)
        public string LFactor { get; set; } // LFactor (length: 4000)
        public string OdometerReading { get; set; } // OdometerReading (length: 4000)
        public bool Tampered { get; set; } // Tampered
        public string InvoiceNumber { get; set; } // InvoiceNumber (length: 4000)
        public string InspectionInfo { get; set; } // InspectionInfo (length: 4000)
        public bool TachographHasAdapter { get; set; } // TachographHasAdapter
        public string TachographAdapterSerialNumber { get; set; } // TachographAdapterSerialNumber (length: 4000)
        public string TachographAdapterLocation { get; set; } // TachographAdapterLocation (length: 4000)
        public string TachographCableColor { get; set; } // TachographCableColor (length: 4000)
        public string MinorWorkDetails { get; set; } // MinorWorkDetails (length: 4000)
        public string TachographType { get; set; } // TachographType (length: 4000)
        public string CardSerialNumber { get; set; } // CardSerialNumber (length: 4000)
        public System.DateTime? CalibrationTime { get; set; } // CalibrationTime
        public bool IsDigital { get; set; } // IsDigital
        public System.DateTime Created { get; set; } // Created
        public string DocumentType { get; set; } // DocumentType (length: 4000)
        public string Office { get; set; } // Office (length: 4000)
        public string RegistrationNumber { get; set; } // RegistrationNumber (length: 4000)
        public string TachographMake { get; set; } // TachographMake (length: 4000)
        public string TachographModel { get; set; } // TachographModel (length: 4000)
        public string SerialNumber { get; set; } // SerialNumber (length: 4000)
        public System.DateTime? InspectionDate { get; set; } // InspectionDate
        public string Technician { get; set; } // Technician (length: 4000)
        public string CustomerContact { get; set; } // CustomerContact (length: 4000)
        public bool NewBattery { get; set; } // NewBattery
        public string DepotName { get; set; } // DepotName (length: 4000)
        public string CompanyName { get; set; } // CompanyName (length: 4000)
        public byte[] SerializedData { get; set; } // SerializedData (length: 1073741823)
        public int UserId { get; set; } // UserId
        public System.DateTime? Deleted { get; set; } // Deleted
        public System.DateTime? Uploaded { get; set; } // Uploaded
        public bool IsQcCheck { get; set; } // IsQCCheck

        public TachographDocument()
        {
            NewBattery = false;
            UserId = 0;
            IsQcCheck = false;
        }
    }

    // TachographFiles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TachographFile
    {
        public int Id { get; set; } // Id (Primary key)
        public string Customer { get; set; } // Customer (length: 4000)
        public string RegistrationNumber { get; set; } // RegistrationNumber (length: 4000)
        public string FileName { get; set; } // FileName (length: 4000)
        public byte[] SerializedFile { get; set; } // SerializedFile (length: 1073741823)
        public System.DateTime Date { get; set; } // Date
        public System.DateTime? Deleted { get; set; } // Deleted
    }

    // TachographMakes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TachographMake
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TachographModel> TachographModels { get; set; } // TachographModels.FK_dbo.TachographModels_dbo.TachographMakes_TachographMake_Id

        public TachographMake()
        {
            TachographModels = new System.Collections.Generic.List<TachographModel>();
        }
    }

    // TachographModels
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TachographModel
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 4000)
        public int? TachographMakeId { get; set; } // TachographMake_Id
        public System.DateTime? Deleted { get; set; } // Deleted

        // Foreign keys
        public virtual TachographMake TachographMake { get; set; } // FK_dbo.TachographModels_dbo.TachographMakes_TachographMake_Id
    }

    // Technicians
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class Technician
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 4000)
        public bool IsDefault { get; set; } // IsDefault
        public string Number { get; set; } // Number (length: 4000)
        public byte[] RawImage { get; set; } // RawImage (length: 1073741823)
        public System.DateTime? Deleted { get; set; } // Deleted
        public System.DateTime? DateOfLastCheck { get; set; } // DateOfLastCheck
        public System.DateTime? DateOfLast3YearCheck { get; set; } // DateOfLast3YearCheck
        public int UserId { get; set; } // UserId
        public System.DateTime? Uploaded { get; set; } // Uploaded

        public Technician()
        {
            UserId = 0;
        }
    }

    // ThemeSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class ThemeSetting
    {
        public int Id { get; set; } // Id (Primary key)
        public string SelectedTheme { get; set; } // SelectedTheme (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted
    }

    // TyreSizes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TyreSize
    {
        public int Id { get; set; } // Id (Primary key)
        public string Size { get; set; } // Size (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted
    }

    // UndownloadabilityDocuments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class UndownloadabilityDocument
    {
        public int Id { get; set; } // Id (Primary key)
        public System.DateTime Created { get; set; } // Created
        public string DocumentType { get; set; } // DocumentType (length: 4000)
        public string Office { get; set; } // Office (length: 4000)
        public string RegistrationNumber { get; set; } // RegistrationNumber (length: 4000)
        public string TachographMake { get; set; } // TachographMake (length: 4000)
        public string TachographModel { get; set; } // TachographModel (length: 4000)
        public string SerialNumber { get; set; } // SerialNumber (length: 4000)
        public System.DateTime? InspectionDate { get; set; } // InspectionDate
        public string Technician { get; set; } // Technician (length: 4000)
        public string CustomerContact { get; set; } // CustomerContact (length: 4000)
        public string DepotName { get; set; } // DepotName (length: 4000)
        public string CompanyName { get; set; } // CompanyName (length: 4000)
        public byte[] SerializedData { get; set; } // SerializedData (length: 1073741823)
        public int UserId { get; set; } // UserId
        public System.DateTime? Deleted { get; set; } // Deleted
        public System.DateTime? Uploaded { get; set; } // Uploaded

        public UndownloadabilityDocument()
        {
            UserId = 0;
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class User
    {
        public int Id { get; set; } // Id (Primary key)
        public string Username { get; set; } // Username (length: 4000)
        public string Password { get; set; } // Password (length: 4000)
        public byte[] RawImage { get; set; } // RawImage (length: 1073741823)
        public System.DateTime? Deleted { get; set; } // Deleted
    }

    // VehicleMakes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class VehicleMake
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<VehicleModel> VehicleModels { get; set; } // VehicleModels.FK_dbo.VehicleModels_dbo.VehicleMakes_VehicleMake_Id

        public VehicleMake()
        {
            VehicleModels = new System.Collections.Generic.List<VehicleModel>();
        }
    }

    // VehicleModels
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class VehicleModel
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 4000)
        public int? VehicleMakeId { get; set; } // VehicleMake_Id
        public System.DateTime? Deleted { get; set; } // Deleted

        // Foreign keys
        public virtual VehicleMake VehicleMake { get; set; } // FK_dbo.VehicleModels_dbo.VehicleMakes_VehicleMake_Id
    }

    // WorkerTasks
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class WorkerTask
    {
        public int Id { get; set; } // Id (Primary key)
        public string ParametersAsString { get; set; } // ParametersAsString (length: 536870911)
        public int TaskName { get; set; } // TaskName
        public System.DateTime Added { get; set; } // Added
        public bool IsProcessing { get; set; } // IsProcessing
        public System.DateTime? Processed { get; set; } // Processed
        public System.Guid WorkerId { get; set; } // WorkerId
        public string Message { get; set; } // Message (length: 4000)
        public System.DateTime? Deleted { get; set; } // Deleted
    }

    // WorkshopCardFiles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class WorkshopCardFile
    {
        public int Id { get; set; } // Id (Primary key)
        public string Workshop { get; set; } // Workshop (length: 4000)
        public string FileName { get; set; } // FileName (length: 4000)
        public byte[] SerializedFile { get; set; } // SerializedFile (length: 1073741823)
        public System.DateTime Date { get; set; } // Date
        public System.DateTime? Deleted { get; set; } // Deleted
    }

    // WorkshopSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class WorkshopSetting
    {
        public int Id { get; set; } // Id (Primary key)
        public bool AutoBackup { get; set; } // AutoBackup
        public string BackupFilePath { get; set; } // BackupFilePath (length: 4000)
        public string Office { get; set; } // Office (length: 4000)
        public string Address1 { get; set; } // Address1 (length: 4000)
        public string Address2 { get; set; } // Address2 (length: 4000)
        public string Town { get; set; } // Town (length: 4000)
        public string PostCode { get; set; } // PostCode (length: 4000)
        public string WorkshopName { get; set; } // WorkshopName (length: 4000)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 4000)
        public bool AutoPrintLabels { get; set; } // AutoPrintLabels
        public string MainEmailAddress { get; set; } // MainEmailAddress (length: 4000)
        public string SecondaryEmailAddress { get; set; } // SecondaryEmailAddress (length: 4000)
        public bool SendToCustomer { get; set; } // SendToCustomer
        public bool SendToOffice { get; set; } // SendToOffice
        public bool DoNotSend { get; set; } // DoNotSend
        public byte[] RawImage { get; set; } // RawImage (length: 1073741823)
        public System.DateTime? Deleted { get; set; } // Deleted
        public string Address3 { get; set; } // Address3 (length: 4000)
        public System.DateTime? CentreQuarterlyCheckDate { get; set; } // CentreQuarterlyCheckDate
        public System.DateTime? MonthlyGv212Date { get; set; } // MonthlyGV212Date
        public bool IsStatusReportCheckEnabled { get; set; } // IsStatusReportCheckEnabled
        public bool IsGv212CheckEnabled { get; set; } // IsGV212CheckEnabled
        public int UserId { get; set; } // UserId
        public System.DateTime? Uploaded { get; set; } // Uploaded
        public System.DateTime Created { get; set; } // Created
        public bool SendMonthlyReport { get; set; } // SendMonthlyReport

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CustomDayOfWeek> CustomDayOfWeeks { get; set; } // CustomDayOfWeeks.FK_dbo.CustomDayOfWeeks_dbo.WorkshopSettings_WorkshopSettings_Id

        public WorkshopSetting()
        {
            AutoPrintLabels = false;
            SendToCustomer = false;
            SendToOffice = false;
            DoNotSend = false;
            IsStatusReportCheckEnabled = false;
            IsGv212CheckEnabled = false;
            UserId = 0;
            SendMonthlyReport = false;
            CustomDayOfWeeks = new System.Collections.Generic.List<CustomDayOfWeek>();
        }
    }

    #endregion

    #region POCO Configuration

    // CustomDayOfWeeks
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class CustomDayOfWeekConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CustomDayOfWeek>
    {
        public CustomDayOfWeekConfiguration()
            : this("")
        {
        }

        public CustomDayOfWeekConfiguration(string schema)
        {
            ToTable("CustomDayOfWeeks");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DayOfWeek).HasColumnName(@"DayOfWeek").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.WorkshopSettingsId).HasColumnName(@"WorkshopSettings_Id").HasColumnType("int").IsOptional();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.WorkshopSetting).WithMany(b => b.CustomDayOfWeeks).HasForeignKey(c => c.WorkshopSettingsId).WillCascadeOnDelete(false); // FK_dbo.CustomDayOfWeeks_dbo.WorkshopSettings_WorkshopSettings_Id
        }
    }

    // CustomerContacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class CustomerContactConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CustomerContact>
    {
        public CustomerContactConfiguration()
            : this("")
        {
        }

        public CustomerContactConfiguration(string schema)
        {
            ToTable("CustomerContacts");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.PostCode).HasColumnName(@"PostCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Town).HasColumnName(@"Town").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SecondaryEmail).HasColumnName(@"SecondaryEmail").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime").IsOptional();
        }
    }

    // DetailedExceptions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class DetailedExceptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DetailedException>
    {
        public DetailedExceptionConfiguration()
            : this("")
        {
        }

        public DetailedExceptionConfiguration(string schema)
        {
            ToTable("DetailedExceptions");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ExceptionDetails).HasColumnName(@"ExceptionDetails").HasColumnType("ntext").IsOptional().IsMaxLength();
            Property(x => x.ApplicationName).HasColumnName(@"ApplicationName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.RawImage).HasColumnName(@"RawImage").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Occurred).HasColumnName(@"Occurred").HasColumnType("datetime").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime").IsOptional();
        }
    }

    // DriverCardFiles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class DriverCardFileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DriverCardFile>
    {
        public DriverCardFileConfiguration()
            : this("")
        {
        }

        public DriverCardFileConfiguration(string schema)
        {
            ToTable("DriverCardFiles");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Driver).HasColumnName(@"Driver").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SerializedFile).HasColumnName(@"SerializedFile").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("datetime").IsRequired();
            Property(x => x.CustomerId).HasColumnName(@"Customer_Id").HasColumnType("int").IsOptional();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.CustomerContact).WithMany(b => b.DriverCardFiles).HasForeignKey(c => c.CustomerId).WillCascadeOnDelete(false); // FK_dbo.DriverCardFiles_dbo.CustomerContacts_Customer_Id
        }
    }

    // GV212Report
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class Gv212ReportConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Gv212Report>
    {
        public Gv212ReportConfiguration()
            : this("")
        {
        }

        public Gv212ReportConfiguration(string schema)
        {
            ToTable("GV212Report");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            Property(x => x.SerializedData).HasColumnName(@"SerializedData").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // InspectionEquipments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class InspectionEquipmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InspectionEquipment>
    {
        public InspectionEquipmentConfiguration()
            : this("")
        {
        }

        public InspectionEquipmentConfiguration(string schema)
        {
            ToTable("InspectionEquipments");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // InspectionMethods
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class InspectionMethodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InspectionMethod>
    {
        public InspectionMethodConfiguration()
            : this("")
        {
        }

        public InspectionMethodConfiguration(string schema)
        {
            ToTable("InspectionMethods");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // LetterForDecommissioningDocuments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class LetterForDecommissioningDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LetterForDecommissioningDocument>
    {
        public LetterForDecommissioningDocumentConfiguration()
            : this("")
        {
        }

        public LetterForDecommissioningDocumentConfiguration(string schema)
        {
            ToTable("LetterForDecommissioningDocuments");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            Property(x => x.DocumentType).HasColumnName(@"DocumentType").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Office).HasColumnName(@"Office").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.RegistrationNumber).HasColumnName(@"RegistrationNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographMake).HasColumnName(@"TachographMake").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographModel).HasColumnName(@"TachographModel").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SerialNumber).HasColumnName(@"SerialNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.InspectionDate).HasColumnName(@"InspectionDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Technician).HasColumnName(@"Technician").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CustomerContact).HasColumnName(@"CustomerContact").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.DepotName).HasColumnName(@"DepotName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SerializedData).HasColumnName(@"SerializedData").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime").IsOptional();
        }
    }

    // LinkedVehicles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class LinkedVehicleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LinkedVehicle>
    {
        public LinkedVehicleConfiguration()
            : this("")
        {
        }

        public LinkedVehicleConfiguration(string schema)
        {
            ToTable("LinkedVehicles");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.VehicleRegistrationNumber).HasColumnName(@"VehicleRegistrationNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.CustomerContactId).HasColumnName(@"CustomerContact_Id").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.CustomerContact).WithMany(b => b.LinkedVehicles).HasForeignKey(c => c.CustomerContactId).WillCascadeOnDelete(false); // FK_dbo.LinkedVehicles_dbo.CustomerContacts_CustomerContact_Id
        }
    }

    // MailSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class MailSettingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MailSetting>
    {
        public MailSettingConfiguration()
            : this("")
        {
        }

        public MailSettingConfiguration(string schema)
        {
            ToTable("MailSettings");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AutoEmailCertificates).HasColumnName(@"AutoEmailCertificates").HasColumnType("bit").IsRequired();
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("ntext").IsOptional().IsMaxLength();
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("ntext").IsOptional().IsMaxLength();
            Property(x => x.Content).HasColumnName(@"Content").HasColumnType("ntext").IsOptional().IsMaxLength();
            Property(x => x.PersonaliseMyEmails).HasColumnName(@"PersonaliseMyEmails").HasColumnType("bit").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // __MigrationHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class MigrationHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MigrationHistory>
    {
        public MigrationHistoryConfiguration()
            : this("")
        {
        }

        public MigrationHistoryConfiguration(string schema)
        {
            ToTable("__MigrationHistory");
            HasKey(x => new { x.MigrationId, x.ContextKey });

            Property(x => x.MigrationId).HasColumnName(@"MigrationId").HasColumnType("nvarchar").IsRequired().HasMaxLength(150).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContextKey).HasColumnName(@"ContextKey").HasColumnType("nvarchar").IsRequired().HasMaxLength(300).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Model).HasColumnName(@"Model").HasColumnType("image").IsRequired().HasMaxLength(null);
            Property(x => x.ProductVersion).HasColumnName(@"ProductVersion").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
        }
    }

    // MiscellaneousSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class MiscellaneousSettingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MiscellaneousSetting>
    {
        public MiscellaneousSettingConfiguration()
            : this("")
        {
        }

        public MiscellaneousSettingConfiguration(string schema)
        {
            ToTable("MiscellaneousSettings");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DefaultDigitalDocumentType).HasColumnName(@"DefaultDigitalDocumentType").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.DefaultAnalogueDocumentType).HasColumnName(@"DefaultAnalogueDocumentType").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.ExcludeLogosWhenPrinting).HasColumnName(@"ExcludeLogosWhenPrinting").HasColumnType("bit").IsRequired();
            Property(x => x.LastMigrationHackId).HasColumnName(@"LastMigrationHackId").HasColumnType("int").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // MobileApplicationUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class MobileApplicationUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MobileApplicationUser>
    {
        public MobileApplicationUserConfiguration()
            : this("")
        {
        }

        public MobileApplicationUserConfiguration(string schema)
        {
            ToTable("MobileApplicationUsers");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Thumbprint).HasColumnName(@"Thumbprint").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.IsAuthorized).HasColumnName(@"IsAuthorized").HasColumnType("bit").IsRequired();
        }
    }

    // PrinterSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class PrinterSettingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PrinterSetting>
    {
        public PrinterSettingConfiguration()
            : this("")
        {
        }

        public PrinterSettingConfiguration(string schema)
        {
            ToTable("PrinterSettings");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AlwaysAskForPrinter).HasColumnName(@"AlwaysAskForPrinter").HasColumnType("bit").IsRequired();
            Property(x => x.UseDefaultPrinter).HasColumnName(@"UseDefaultPrinter").HasColumnType("bit").IsRequired();
            Property(x => x.DefaultPrinterName).HasColumnName(@"DefaultPrinterName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.DefaultLabelPrinter).HasColumnName(@"DefaultLabelPrinter").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.IsPortrait).HasColumnName(@"IsPortrait").HasColumnType("bit").IsRequired();
            Property(x => x.IsLandscape).HasColumnName(@"IsLandscape").HasColumnType("bit").IsRequired();
            Property(x => x.DefaultNumberOfCopies).HasColumnName(@"DefaultNumberOfCopies").HasColumnType("int").IsRequired();
            Property(x => x.LabelNumberOfCopies).HasColumnName(@"LabelNumberOfCopies").HasColumnType("int").IsRequired();
            Property(x => x.AutoPrintLabels).HasColumnName(@"AutoPrintLabels").HasColumnType("bit").IsRequired();
            Property(x => x.DefaultFont).HasColumnName(@"DefaultFont").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.AutoClosePdfProgram).HasColumnName(@"AutoClosePDFProgram").HasColumnType("bit").IsRequired();
            Property(x => x.Timeout).HasColumnName(@"Timeout").HasColumnType("int").IsRequired();
            Property(x => x.ShowCompanyNameOnLabels).HasColumnName(@"ShowCompanyNameOnLabels").HasColumnType("bit").IsRequired();
        }
    }

    // QCReports
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class QcReportConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QcReport>
    {
        public QcReportConfiguration()
            : this("")
        {
        }

        public QcReportConfiguration(string schema)
        {
            ToTable("QCReports");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TachoCentreName).HasColumnName(@"TachoCentreName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachoCentreLine1).HasColumnName(@"TachoCentreLine1").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachoCentreLine2).HasColumnName(@"TachoCentreLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachoCentreLine3).HasColumnName(@"TachoCentreLine3").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachoCentreCity).HasColumnName(@"TachoCentreCity").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachoCentrePostCode).HasColumnName(@"TachoCentrePostCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachoManagerName).HasColumnName(@"TachoManagerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.QcManagerName).HasColumnName(@"QCManagerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TechnicianName).HasColumnName(@"TechnicianName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.DateOfAudit).HasColumnName(@"DateOfAudit").HasColumnType("datetime").IsRequired();
            Property(x => x.TypeOfTachographCheck).HasColumnName(@"TypeOfTachographCheck").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographMake).HasColumnName(@"TachographMake").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographModel).HasColumnName(@"TachographModel").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographSerialNumber).HasColumnName(@"TachographSerialNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.VehicleMake).HasColumnName(@"VehicleMake").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.VehicleRegistrationNumber).HasColumnName(@"VehicleRegistrationNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.VehicleIdentificationNumber).HasColumnName(@"VehicleIdentificationNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.ThreeBasicChecksCompleted).HasColumnName(@"ThreeBasicChecksCompleted").HasColumnType("bit").IsRequired();
            Property(x => x.WFactor).HasColumnName(@"WFactor").HasColumnType("int").IsOptional();
            Property(x => x.LFactor).HasColumnName(@"LFactor").HasColumnType("int").IsOptional();
            Property(x => x.KFactor).HasColumnName(@"KFactor").HasColumnType("int").IsOptional();
            Property(x => x.FortyKmTest).HasColumnName(@"FortyKmTest").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SixtyKmTest).HasColumnName(@"SixtyKmTest").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.ClockTestCompleted).HasColumnName(@"ClockTestCompleted").HasColumnType("bit").IsOptional();
            Property(x => x.BenchTestCarriedOutAnalogue).HasColumnName(@"BenchTestCarriedOutAnalogue").HasColumnType("bit").IsOptional();
            Property(x => x.FunctionalBenchTestDigital).HasColumnName(@"FunctionalBenchTestDigital").HasColumnType("bit").IsOptional();
            Property(x => x.DistanceCheckCarriedOut).HasColumnName(@"DistanceCheckCarriedOut").HasColumnType("bit").IsOptional();
            Property(x => x.TestChartsCompleted).HasColumnName(@"TestChartsCompleted").HasColumnType("bit").IsOptional();
            Property(x => x.SpeedForSpeedCheckCompleted).HasColumnName(@"SpeedForSpeedCheckCompleted").HasColumnType("bit").IsOptional();
            Property(x => x.SystemSealedInAccordance).HasColumnName(@"SystemSealedInAccordance").HasColumnType("bit").IsRequired();
            Property(x => x.CalibrationCertificateCompleted).HasColumnName(@"CalibrationCertificateCompleted").HasColumnType("bit").IsRequired();
            Property(x => x.ReferenceCableCheckCompleted).HasColumnName(@"ReferenceCableCheckCompleted").HasColumnType("bit").IsOptional();
            Property(x => x.TechnicalDataPrintoutsCreated).HasColumnName(@"TechnicalDataPrintoutsCreated").HasColumnType("bit").IsOptional();
            Property(x => x.EventsFaultsReadCleared).HasColumnName(@"EventsFaultsReadCleared").HasColumnType("bit").IsOptional();
            Property(x => x.Comments).HasColumnName(@"Comments").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Passed).HasColumnName(@"Passed").HasColumnType("bit").IsRequired();
            Property(x => x.CentreName).HasColumnName(@"CentreName").HasColumnType("nvarchar").IsRequired().HasMaxLength(4000);
            Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime").IsOptional();
            Property(x => x.MobileDocumentType).HasColumnName(@"MobileDocumentType").HasColumnType("int").IsRequired();
            Property(x => x.ConnectUserId).HasColumnName(@"ConnectUserId").HasColumnType("int").IsOptional();
            Property(x => x.SerializedData).HasColumnName(@"SerializedData").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"User_Id").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.MobileApplicationUser).WithMany(b => b.QcReports).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_dbo.QCReports_dbo.MobileApplicationUsers_User_Id
        }
    }

    // QCReport6Month
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class QcReport6MonthConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QcReport6Month>
    {
        public QcReport6MonthConfiguration()
            : this("")
        {
        }

        public QcReport6MonthConfiguration(string schema)
        {
            ToTable("QCReport6Month");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CentreSealNumber).HasColumnName(@"CentreSealNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(4000);
            Property(x => x.Section3Question1).HasColumnName(@"Section3Question1").HasColumnType("bit").IsRequired();
            Property(x => x.Section3Question2).HasColumnName(@"Section3Question2").HasColumnType("bit").IsRequired();
            Property(x => x.Section4Question1).HasColumnName(@"Section4Question1").HasColumnType("bit").IsRequired();
            Property(x => x.Section4Question2).HasColumnName(@"Section4Question2").HasColumnType("bit").IsRequired();
            Property(x => x.Section4Question3).HasColumnName(@"Section4Question3").HasColumnType("bit").IsRequired();
            Property(x => x.Section5Question1).HasColumnName(@"Section5Question1").HasColumnType("bit").IsRequired();
            Property(x => x.Section5Question2).HasColumnName(@"Section5Question2").HasColumnType("bit").IsRequired();
            Property(x => x.Section7Question1).HasColumnName(@"Section7Question1").HasColumnType("bit").IsRequired();
            Property(x => x.Section7Question2).HasColumnName(@"Section7Question2").HasColumnType("bit").IsRequired();
            Property(x => x.CalibrationSection9And10Question1).HasColumnName(@"CalibrationSection9And10Question1").HasColumnType("bit").IsRequired();
            Property(x => x.CalibrationSection9And10Question2).HasColumnName(@"CalibrationSection9And10Question2").HasColumnType("bit").IsRequired();
            Property(x => x.CalibrationSection9And10Question3).HasColumnName(@"CalibrationSection9And10Question3").HasColumnType("bit").IsRequired();
            Property(x => x.DataManagementSection10Question1).HasColumnName(@"DataManagementSection10Question1").HasColumnType("bit").IsRequired();
            Property(x => x.DataManagementSection10Question2).HasColumnName(@"DataManagementSection10Question2").HasColumnType("bit").IsRequired();
            Property(x => x.DataManagementSection10Question3).HasColumnName(@"DataManagementSection10Question3").HasColumnType("bit").IsRequired();
            Property(x => x.FurtherDetails).HasColumnName(@"FurtherDetails").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(4000);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("datetime").IsRequired();
            Property(x => x.CentreName).HasColumnName(@"CentreName").HasColumnType("nvarchar").IsRequired().HasMaxLength(4000);
            Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime").IsOptional();
            Property(x => x.MobileDocumentType).HasColumnName(@"MobileDocumentType").HasColumnType("int").IsRequired();
            Property(x => x.ConnectUserId).HasColumnName(@"ConnectUserId").HasColumnType("int").IsOptional();
            Property(x => x.SerializedData).HasColumnName(@"SerializedData").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"User_Id").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.MobileApplicationUser).WithMany(b => b.QcReport6Month).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_dbo.QCReport6Month_dbo.MobileApplicationUsers_User_Id
        }
    }

    // RegistrationData
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class RegistrationDataConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RegistrationData>
    {
        public RegistrationDataConfiguration()
            : this("")
        {
        }

        public RegistrationDataConfiguration(string schema)
        {
            ToTable("RegistrationData");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LicenseKey).HasColumnName(@"LicenseKey").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.DepotName).HasColumnName(@"DepotName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.IsConnectEnabled).HasColumnName(@"IsConnectEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // TachographDocuments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TachographDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TachographDocument>
    {
        public TachographDocumentConfiguration()
            : this("")
        {
        }

        public TachographDocumentConfiguration(string schema)
        {
            ToTable("TachographDocuments");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Vin).HasColumnName(@"VIN").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.VehicleMake).HasColumnName(@"VehicleMake").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.VehicleModel).HasColumnName(@"VehicleModel").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TyreSize).HasColumnName(@"TyreSize").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.WFactor).HasColumnName(@"WFactor").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.KFactor).HasColumnName(@"KFactor").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.LFactor).HasColumnName(@"LFactor").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.OdometerReading).HasColumnName(@"OdometerReading").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Tampered).HasColumnName(@"Tampered").HasColumnType("bit").IsRequired();
            Property(x => x.InvoiceNumber).HasColumnName(@"InvoiceNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.InspectionInfo).HasColumnName(@"InspectionInfo").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographHasAdapter).HasColumnName(@"TachographHasAdapter").HasColumnType("bit").IsRequired();
            Property(x => x.TachographAdapterSerialNumber).HasColumnName(@"TachographAdapterSerialNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographAdapterLocation).HasColumnName(@"TachographAdapterLocation").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographCableColor).HasColumnName(@"TachographCableColor").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.MinorWorkDetails).HasColumnName(@"MinorWorkDetails").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographType).HasColumnName(@"TachographType").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CardSerialNumber).HasColumnName(@"CardSerialNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CalibrationTime).HasColumnName(@"CalibrationTime").HasColumnType("datetime").IsOptional();
            Property(x => x.IsDigital).HasColumnName(@"IsDigital").HasColumnType("bit").IsRequired();
            Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            Property(x => x.DocumentType).HasColumnName(@"DocumentType").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Office).HasColumnName(@"Office").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.RegistrationNumber).HasColumnName(@"RegistrationNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographMake).HasColumnName(@"TachographMake").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographModel).HasColumnName(@"TachographModel").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SerialNumber).HasColumnName(@"SerialNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.InspectionDate).HasColumnName(@"InspectionDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Technician).HasColumnName(@"Technician").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CustomerContact).HasColumnName(@"CustomerContact").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.NewBattery).HasColumnName(@"NewBattery").HasColumnType("bit").IsRequired();
            Property(x => x.DepotName).HasColumnName(@"DepotName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SerializedData).HasColumnName(@"SerializedData").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime").IsOptional();
            Property(x => x.IsQcCheck).HasColumnName(@"IsQCCheck").HasColumnType("bit").IsRequired();
        }
    }

    // TachographFiles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TachographFileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TachographFile>
    {
        public TachographFileConfiguration()
            : this("")
        {
        }

        public TachographFileConfiguration(string schema)
        {
            ToTable("TachographFiles");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Customer).HasColumnName(@"Customer").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.RegistrationNumber).HasColumnName(@"RegistrationNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SerializedFile).HasColumnName(@"SerializedFile").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("datetime").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // TachographMakes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TachographMakeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TachographMake>
    {
        public TachographMakeConfiguration()
            : this("")
        {
        }

        public TachographMakeConfiguration(string schema)
        {
            ToTable("TachographMakes");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // TachographModels
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TachographModelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TachographModel>
    {
        public TachographModelConfiguration()
            : this("")
        {
        }

        public TachographModelConfiguration(string schema)
        {
            ToTable("TachographModels");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographMakeId).HasColumnName(@"TachographMake_Id").HasColumnType("int").IsOptional();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.TachographMake).WithMany(b => b.TachographModels).HasForeignKey(c => c.TachographMakeId).WillCascadeOnDelete(false); // FK_dbo.TachographModels_dbo.TachographMakes_TachographMake_Id
        }
    }

    // Technicians
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TechnicianConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Technician>
    {
        public TechnicianConfiguration()
            : this("")
        {
        }

        public TechnicianConfiguration(string schema)
        {
            ToTable("Technicians");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("bit").IsRequired();
            Property(x => x.Number).HasColumnName(@"Number").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.RawImage).HasColumnName(@"RawImage").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.DateOfLastCheck).HasColumnName(@"DateOfLastCheck").HasColumnType("datetime").IsOptional();
            Property(x => x.DateOfLast3YearCheck).HasColumnName(@"DateOfLast3YearCheck").HasColumnType("datetime").IsOptional();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime").IsOptional();
        }
    }

    // ThemeSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class ThemeSettingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ThemeSetting>
    {
        public ThemeSettingConfiguration()
            : this("")
        {
        }

        public ThemeSettingConfiguration(string schema)
        {
            ToTable("ThemeSettings");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SelectedTheme).HasColumnName(@"SelectedTheme").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // TyreSizes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class TyreSizeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TyreSize>
    {
        public TyreSizeConfiguration()
            : this("")
        {
        }

        public TyreSizeConfiguration(string schema)
        {
            ToTable("TyreSizes");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Size).HasColumnName(@"Size").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // UndownloadabilityDocuments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class UndownloadabilityDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UndownloadabilityDocument>
    {
        public UndownloadabilityDocumentConfiguration()
            : this("")
        {
        }

        public UndownloadabilityDocumentConfiguration(string schema)
        {
            ToTable("UndownloadabilityDocuments");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            Property(x => x.DocumentType).HasColumnName(@"DocumentType").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Office).HasColumnName(@"Office").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.RegistrationNumber).HasColumnName(@"RegistrationNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographMake).HasColumnName(@"TachographMake").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.TachographModel).HasColumnName(@"TachographModel").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SerialNumber).HasColumnName(@"SerialNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.InspectionDate).HasColumnName(@"InspectionDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Technician).HasColumnName(@"Technician").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CustomerContact).HasColumnName(@"CustomerContact").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.DepotName).HasColumnName(@"DepotName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SerializedData).HasColumnName(@"SerializedData").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime").IsOptional();
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("Users");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.RawImage).HasColumnName(@"RawImage").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // VehicleMakes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class VehicleMakeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehicleMake>
    {
        public VehicleMakeConfiguration()
            : this("")
        {
        }

        public VehicleMakeConfiguration(string schema)
        {
            ToTable("VehicleMakes");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // VehicleModels
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class VehicleModelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehicleModel>
    {
        public VehicleModelConfiguration()
            : this("")
        {
        }

        public VehicleModelConfiguration(string schema)
        {
            ToTable("VehicleModels");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.VehicleMakeId).HasColumnName(@"VehicleMake_Id").HasColumnType("int").IsOptional();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.VehicleMake).WithMany(b => b.VehicleModels).HasForeignKey(c => c.VehicleMakeId).WillCascadeOnDelete(false); // FK_dbo.VehicleModels_dbo.VehicleMakes_VehicleMake_Id
        }
    }

    // WorkerTasks
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class WorkerTaskConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkerTask>
    {
        public WorkerTaskConfiguration()
            : this("")
        {
        }

        public WorkerTaskConfiguration(string schema)
        {
            ToTable("WorkerTasks");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ParametersAsString).HasColumnName(@"ParametersAsString").HasColumnType("ntext").IsOptional().IsMaxLength();
            Property(x => x.TaskName).HasColumnName(@"TaskName").HasColumnType("int").IsRequired();
            Property(x => x.Added).HasColumnName(@"Added").HasColumnType("datetime").IsRequired();
            Property(x => x.IsProcessing).HasColumnName(@"IsProcessing").HasColumnType("bit").IsRequired();
            Property(x => x.Processed).HasColumnName(@"Processed").HasColumnType("datetime").IsOptional();
            Property(x => x.WorkerId).HasColumnName(@"WorkerId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // WorkshopCardFiles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class WorkshopCardFileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkshopCardFile>
    {
        public WorkshopCardFileConfiguration()
            : this("")
        {
        }

        public WorkshopCardFileConfiguration(string schema)
        {
            ToTable("WorkshopCardFiles");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Workshop).HasColumnName(@"Workshop").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SerializedFile).HasColumnName(@"SerializedFile").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("datetime").IsRequired();
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
        }
    }

    // WorkshopSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class WorkshopSettingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkshopSetting>
    {
        public WorkshopSettingConfiguration()
            : this("")
        {
        }

        public WorkshopSettingConfiguration(string schema)
        {
            ToTable("WorkshopSettings");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AutoBackup).HasColumnName(@"AutoBackup").HasColumnType("bit").IsRequired();
            Property(x => x.BackupFilePath).HasColumnName(@"BackupFilePath").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Office).HasColumnName(@"Office").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Address1).HasColumnName(@"Address1").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.Town).HasColumnName(@"Town").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.PostCode).HasColumnName(@"PostCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.WorkshopName).HasColumnName(@"WorkshopName").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.AutoPrintLabels).HasColumnName(@"AutoPrintLabels").HasColumnType("bit").IsRequired();
            Property(x => x.MainEmailAddress).HasColumnName(@"MainEmailAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SecondaryEmailAddress).HasColumnName(@"SecondaryEmailAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.SendToCustomer).HasColumnName(@"SendToCustomer").HasColumnType("bit").IsRequired();
            Property(x => x.SendToOffice).HasColumnName(@"SendToOffice").HasColumnType("bit").IsRequired();
            Property(x => x.DoNotSend).HasColumnName(@"DoNotSend").HasColumnType("bit").IsRequired();
            Property(x => x.RawImage).HasColumnName(@"RawImage").HasColumnType("image").IsOptional().HasMaxLength(null);
            Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("datetime").IsOptional();
            Property(x => x.Address3).HasColumnName(@"Address3").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.CentreQuarterlyCheckDate).HasColumnName(@"CentreQuarterlyCheckDate").HasColumnType("datetime").IsOptional();
            Property(x => x.MonthlyGv212Date).HasColumnName(@"MonthlyGV212Date").HasColumnType("datetime").IsOptional();
            Property(x => x.IsStatusReportCheckEnabled).HasColumnName(@"IsStatusReportCheckEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.IsGv212CheckEnabled).HasColumnName(@"IsGV212CheckEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime").IsOptional();
            Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            Property(x => x.SendMonthlyReport).HasColumnName(@"SendMonthlyReport").HasColumnType("bit").IsRequired();
        }
    }

    #endregion

}
// </auto-generated>

